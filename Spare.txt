{
    "net_id": 1,
    "open_date": "Sunday",
    "date_priority": 0,
    "open_time": "10:00 am",
    "close_time": "10:00 pm"
}
{
    "net_id": 1,
    "open_date": "Monday",
    "date_priority": 1,
    "open_time": "10:00 am",
    "close_time": "10:00 pm"
}
{
    "net_id": 1,
    "open_date": "Tuesday",
    "date_priority": 2,
    "open_time": "10:00 am",
    "close_time": "10:00 pm"
}
{
    "net_id": 1,
    "open_date": "Wednesday",
    "date_priority": 3,
    "open_time": "10:00 am",
    "close_time": "10:00 pm"
}
{
    "net_id": 1,
    "open_date": "Thursday",
    "date_priority": 4,
    "open_time": "10:00 am",
    "close_time": "10:00 pm"
}
{
    "net_id": 1,
    "open_date": "Friday",
    "date_priority": 5,
    "open_time": "10:00 am",
    "close_time": "10:00 pm"
}
{
    "net_id": 1,
    "open_date": "Saturday",
    "date_priority": 6,
    "open_time": "10:00 am",
    "close_time": "10:00 pm"
}
{
    "net_id": 1,
    "open_date": "Remember's day",
    "date_priority": 7,
    "open_time": "10:00 am",
    "close_time": "10:00 pm"
}

        <tr key = "1">
            <td>{this.state.EditState ? (
              <input
                defaultValue={this.state.network.Category}
              />):(
                this.state.network.Category
              )}</td>
              <td>{this.state.EditState ? (
                <input
                  defaultValue={this.state.network.ID}
                />):(
                  this.state.network.ID
                )}</td>
            <td>
              <button onClick={this.OnEdit}>{this.state.EditState ? "Save" : "Edit" }</button>
              <button> Delete </button>
            </td>
          </tr>

          <th>IP</th>
          <th>Device Name</th>
          <th>VLAN</th>
          <th>Port</th>
          <th>Active</th>
          <th>Description</th>
          <th>Type</th>
          <th>Make</th>
          <th>Model</th>
          <th>Connected Device</th>
          <th>Action</th>

class TableRow extends React.Component{
  constructor(props){
    super(props);
  }
  render(){
    const{IP,D_Name,VLAN,Port,Action,Description,Type,Make,Connected_Device}=this.props;
    return(
    <tr>
        <td>{EditState ? (<input defaultValue={IP}/>):(IP)}</td>
        <td>{EditState ? (<input defaultValue={D_Name}/>):(D_Name)}</td>
        <td>{EditState ? (<input defaultValue={VLAN}/>):(VLAN)}</td>
        <td>{EditState ? (<input defaultValue={Port}/>):(Port)}</td>
        <td>{EditState ? (<input defaultValue={Action}/>):(Action)}</td>
        <td>{EditState ? (<input defaultValue={Description}/>):(Description)}</td>
        <td>{EditState ? (<input defaultValue={Type}/>):(Type)}</td>
        <td>{EditState ? (<input defaultValue={Make}/>):(Make)}</td>
        <td>{EditState ? (<input defaultValue={Model}/>):(Model)}</td>
        <td>{EditState ? (<input defaultValue={Connected_Device}/>):(Connected_Device)}</td>
        <td>
        <button onClick={this.OnEdit}>{EditState ? "Save" : "Edit" }</button>
        <button> Delete </button>
        </td>
    </tr>
  );
  }
}

<EndDeviceTable EndDevices={this.state.network.End_Device} EditState={this.state.EditState} OnEdit={this.OnEdit}/>

<div class="btn-group pull-right" role="group">
  <button id="btnGroupDrop1" type="button" class="btn btn-primary btn-sm dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
    Template
  </button>
  <div class="dropdown-menu" aria-labelledby="btnGroupDrop1">
    <a class="dropdown-item" href="#">Store</a>
    <a class="dropdown-item" href="#">Data Center</a>
  </div>
</div>

qb.select(['c.Category','n.N_Name']).from('network n').join('Category c','c.id=n.Category_id ','left').get((err,res)=>{
  qb.release();
 if(err) return console.error(err);
 console.log(res);
 return response.send(res);
});

// $(document).ready(function(){
//   popluateNavbar();
// });
//
// function popluateNavbar(){
//   var bcls = $('#liquorStore');
//   var bccs = $('#cannbieStore');
//   $.ajax({
//     type:'GET',
//     url:'/api/Netdata/all'}).then(function(res){
//         for(var i = 0; i<res.length; i++){
//           if(res[i].type == 'BCLS'){
//             bcls.append('<li><a href="/newtork/'+res[i].type+'/'+res[i].S_ID+'">'+res[i].type+' - '+res[i].S_ID+'</a></li>');
//           }else{
//             bccs.append('<li><a href="/newtork/'+res[i].type+'/'+res[i].S_ID+'">'+res[i].type+' - '+res[i].S_ID+'</a></li>');
//           }
//         }
//     });
// };
//
// function SideSearch(){
//   var input, filter, ul, li, a, i;
//    input = document.getElementById("SearchInput");
//    filter = input.value.toUpperCase();
//    ul_bcls = document.getElementById("liquorStore");
//    ul_bccs = document.getElementById("cannbieStore");
//    ul_report = document.getElementById("reports");
//    li = ul_bcls.getElementsByTagName("li");
//    console.log(li);
//    for (i = 0; i < li.length; i++) {
//        a = li[i].getElementsByTagName("a")[0];
//        if (a.innerHTML.toUpperCase().indexOf(filter) > -1) {
//            li[i].style.display = "";
//        } else {
//            li[i].style.display = "none";
//        }
//    }
// }

// $scope.vlans[$scope.currentIndex] = angular.copy($scope.selectedItem);
// $.each($scope.vlans,(k,v)=>{
//     if(v[0]===$scope.selectedItem[0]){
//       $scope.vlans[k]=$scope.selectedItem;
//     }
//   });
// $scope.selectedItem = [];
// angular.element(document).ready(function () {
 // angular.element('#VlanTable').DataTable().ajax.reload();
// });
// angular.element('#VlanTable').DataTable();
// let length = angular.element('#VlanTable').DataTable().page.info().length;
// console.log(length);
// angular.element('#VlanTable').DataTable().destroy();
// angular.element('#VlanTable').DataTable({"PageLength":10});
const temp ={
  "network_info": {
      "id": 63,
      "user_id": 1,
      "N_Name": "kanmesss.s store",
      "N_Number": "555",
      "address": "PO Box 368, 301 - 3r12321321dsa",
      "Postal_Code": "V0K 1A0",
      "Phone": "(250) 453-2542",
      "Fax": "(250) 453-9507",
      "Circuit_ID": "1137330",
      "Category_id": 1
  },
  "Net_devices": [
      {
          "id": 31,
          "Net_id": 63,
          "type": "Switch2222",
          "name": "LDBRRddddddddd017dsadsa",
          "Loopback": "10.44.17.250",
          "Make": "Cisco",
          "Model": "2911",
          "Serial_Number": "FHK1439F2TT",
          "Status": 0
      },
      {
          "id": 32,
          "type": "Router tstetststs",
          "name": "LDdsadsadsa",
          "Loopback": "10.44.17.25ss4",
          "Make": "Cidsdsdsco",
          "Model": "2960-24LC-dddS",
          "Serial_Number": "FHK1439F2TT",
          "Status": 1
      }
  ],
  "End_Devices": [
      {
          "id": 56,
          "net_id": 63,
          "ip": "10.44.3dddsadadddddd21.2",
          "name": "LDR0dsadsa1002sdaskden",
          "VLAN_ID": 20,
          "Port": "F0/3",
          "Active": "true",
          "Description": "Registedsadsardsa",
          "Type": "POS Register",
          "Make": "Zabar",
          "Model": "Register",
          "NetDevice": "LDBRdsadsaR002",
          "Status": 0
      },
      {
          "id": 57,
          "net_id": 63,
          "ip": "10.44.321.222222",
          "name": "LDR0dsadsa1002",
          "VLAN_ID": 20,
          "Port": "F0/3",
          "Active": "trdsadsaue",
          "Description": "Register 1",
          "Type": "POS Register",
          "Make": "Zabar",
          "Model": "Register",
          "NetDevice": "LDBRR002",
          "Status": 0
      },
      {
          "net_id": 63,
          "ip": "10.44.43ddddddd24.2",
          "name": "LDRdsadsadsa01002",
          "VLAN_ID": 20,
          "Port": "F0/3",
          "Active": "true",
          "Description": "Register 1",
          "Type": "POS Register",
          "Make": "Zabar",
          "Model": "Register",
          "NetDevice": "LDBRR002",
          "Status": 1
      },
      {
          "id": 59,
          "net_id": 63,
          "ip": "10.44.543.2",
          "name": "LDR01002",
          "VLAN_ID": 20,
          "Port": "F0/3",
          "Active": "true",
          "Description": "Register 1",
          "Type": "POS Register",
          "Make": "Zabar",
          "Model": "Register",
          "NetDevice": "LDBRR002",
          "Status": -1
      },
      {
          "id": 60,
          "net_id": 63,
          "ip": "10.44.xxx.2",
          "name": "LDR01002",
          "VLAN_ID": 20,
          "Port": "F0/3",
          "Active": "true",
          "Description": "Register 1",
          "Type": "POS Register",
          "Make": "Zabar",
          "Model": "Register",
          "NetDevice": "LDBRR002",
          "Status": -1
      }
  ],
  "VlanNetwork": [
      {
          "id": 7,
          "net_id": 63,
          "vlan_id": 1,
          "Gateway": "10.44.fddddd.1",
          "Submusk": "255.255.255.192",
          "Status": 0
      },
      {
          "id": 8,
          "net_id": 63,
          "vlan_id": 6,
          "Gateway": "10.44.2.1",
          "Submusk": "255.255.255.240",
          "Status": -1
      }
  ],
  "WANs": [
      {
          "id": 19,
          "net_id": 63,
          "Provider": "Telu",
          "WAN_Type": "ADSadsadsadddsdaL",
          "Upload": "6M",
          "DownLoad": "100m",
          "UploadShaping": "9500",
          "WAN_Network": "10.40.0/29",
          "WAN_IP": "10.40.2",
          "ADSL_OOB": "604-1-0410",
          "LOC_ID": "ASH1-00",
          "ASSET_TAG": "1373",
          "CSID": "4339",
          "Status": 0
      },
      {
          "id": 20,
          "net_id": 63,
          "Provider": "SHAW",
          "WAN_Type": "Cabl",
          "Upload": "150M",
          "DownLoad": "170m",
          "UploadShaping": "9500",
          "WAN_Network": "184.40.19230",
          "WAN_IP": "184.40.194",
          "ADSL_OOB": "",
          "LOC_ID": "",
          "ASSET_TAG": "",
          "CSID": "8811784"
      }
  ],
  "Update_history": {
      "net_id": 63,
      "user_id": 1,
      "Update_date": "0000-00-00",
      "Description": "Testing purpose"
  }
};
let network_example = {
  "network_info":{
   "user_id":"1",
   "N_number":"002",
   "Circuit_ID":"1137330",
   "Category_id":"1",
   "N_name":"Ashcroft'",
   "address":"PO Box 368, 301 - 3rd Street Ashcroft , BC",
   "Postal_Code":"V0K 1A0",
   "Phone":"(250) 453-2542",
   "Fax":"(250) 453-9507"
  },
  "End_Devices":[
     {
       "IP":"10.44.321.2",
       "Name":"LDR01002",
       "VLAN_ID":"20",
       "Port":"F0/3",
       "Active":"true",
       "Description":"Registerdsa",
       "Type":"POS Register",
       "Make":"Zabar",
       "Model":"Register",
       "NetDevice":"LDBRR002"
     },
     {
       "IP":"10.44.321.2",
       "Name":"LDR01002",
       "VLAN_ID":"20",
       "Port":"F0/3",
       "Active":"true",
       "Description":"Register 1",
       "Type":"POS Register",
       "Make":"Zabar",
       "Model":"Register",
       "NetDevice":"LDBRR002"
     },
     {
       "IP":"10.44.4324.2",
       "Name":"LDR01002",
       "VLAN_ID":"20",
       "Port":"F0/3",
       "Active":"true",
       "Description":"Register 1",
       "Type":"POS Register",
       "Make":"Zabar",
       "Model":"Register",
       "NetDevice":"LDBRR002"
     },
     {
       "IP":"10.44.543.2",
       "Name":"LDR01002",
       "VLAN_ID":"20",
       "Port":"F0/3",
       "Active":"true",
       "Description":"Register 1",
       "Type":"POS Register",
       "Make":"Zabar",
       "Model":"Register",
       "NetDevice":"LDBRR002"
     },
     {
       "IP":"10.44.xxx.2",
       "Name":"LDR01002",
       "VLAN_ID":"20",
       "Port":"F0/3",
       "Active":"true",
       "Description":"Register 1",
       "Type":"POS Register",
       "Make":"Zabar",
       "Model":"Register",
       "NetDevice":"LDBRR002"
     }
   ],
    "Net_Devices":[
       {
       "type":"Switch",
       "Name":"LDBRR017",
       "Loopback":"10.44.17.250",
       "Make":"Cisco",
       "Model":"2911",
       "Serial_number":"FHK1439F2TT"
      },
      {
      "type":"Router",
      "Name":"LDBRS017",
      "Loopback":"10.44.17.254",
      "Make":"Cisco",
      "Model":"2960-24LC-S",
      "Serial_number":"FHK1439F2TT"
     }
   ],
     "WANs":[
    {
      "Provider":"Telu",
      "WAN_Type":"ADSL",
      "Upload":"6M",
      "Download":"100m",
      "UploadShaping":"9500",
      "WAN_Network":"10.40.0/29",
      "WAN_IP":"10.40.2",
      "ADSL_OOB":"604-1-0410",
      "LOC_ID":"ASH1-00",
      "ASSET_TAG":"1373",
      "CSID":"4339"
    },
    {
      "Provider":"SHAW",
      "WAN_Type":"Cabl",
      "Upload":"150M",
      "Download":"170m",
      "UploadShaping":"9500",
      "WAN_Network":"184.40.19230",
      "WAN_IP":"184.40.194",
      "ADSL_OOB":"",
      "LOC_ID":"",
         "ASSET_TAG":"",
      "CSID":"8811784"
    }
  ],
     "VLANs":[
     {
     "VLAN_ID":"1",
     "Gateway":"10.44.2.1",
     "Submusk":"255.255.255.192"
    },
    {
      "VLAN_ID":"6",
      "Gateway":"10.44.2.1",
      "Submusk":"255.255.255.240"
    }
   ],
     "update_info":{
     "Update_date":"07-16-2012",
     "user_id":"1",
     "Description":"Testing purpose"
    }
 }
 let Template = {
   'End_Device':[
     {
       'IP':'10.44.xxx.2',
       'D_Name':'LDR01002',
       'VLAN':20,
       'Port':'F0/3',
       'Active':true,
       'Description':"Register 1",
       'Type':'POS Register',
       'Make':'Zabar',
       'Model':'Register',
       'Connected_Device':'LDBRR002'
     },
     {
       'IP':'10.44.xxx.17',
       'D_Name':'LDSDC002',
       'VLAN':20,
       'Port':'F0/13',
       'Active':true,
       'Description':"BCLDB RO Domain Controller",
       'Type':'Server',
       'Make':'Zabar',
       'Model':'server',
       'Connected_Device':'LDBRR002'
     },
     {
       'IP':'10.44.xxx.13',
       'D_Name':'LDSDC002',
       'VLAN':20,
       'Port':'F0/13',
       'Active':true,
       'Description':"BCLDB RO Domain Controller",
       'Type':'Server',
       'Make':'Zabar',
       'Model':'server',
       'Connected_Device':'LDBRR002'
     },
     {
       'IP':'10.44.xxx.56',
       'D_Name':'LDSDC002',
       'VLAN':20,
       'Port':'F0/13',
       'Active':true,
       'Description':"BCLDB RO Domain Controller",
       'Type':'Server',
       'Make':'Zabar',
       'Model':'server',
       'Connected_Device':'LDBRR002'
     },
     {
       'IP':'10.44.xxx.78',
       'D_Name':'LDSDC002',
       'VLAN':20,
       'Port':'F0/13',
       'Active':true,
       'Description':"BCLDB RO Domain Controller",
       'Type':'Server',
       'Make':'Zabar',
       'Model':'server',
       'Connected_Device':'LDBRR002'
     }
   ],
   "WANs":[
     {
       "Provider":"Telu",
       "WAN_Type":"ADSL",
       "Upload":"6M",
       "Download":"100m",
       "UploadShaping":"9500",
       "WAN_Network":"10.40.0/29",
       "WAN_IP":"10.40.2",
       "ADSL_OOB":"604-1-0410",
       "LOC_ID":"ASH1-00",
       "ASSET_TAG":"1373",
       "CSID":"4339"
     },
     {
       "Provider":"SHAW",
       "WAN_Type":"Cabl",
       "Upload":"150M",
       "Download":"170m",
       "UploadShaping":"9500",
       "WAN_Network":"184.40.19230",
       "WAN_IP":"184.40.194",
       "ADSL_OOB":"",
        "LOC_ID":"",
        "ASSET_TAG":"",
        "CSID":"8811784"
     }
   ],
   'Net_Device':[
     {
     'type':'Switch',
     'Name':'LDBRR017',
     'Loopback':'10.44.xxx.250',
     'Make':'Cisco',
     'Model':'2911',
     'Serial':'FHK1439F2TT'
    },
    {
    'type':'Router',
    'Name':'LDBRS017',
    'Loopback':'10.44.xxx.254',
    'Make':'Cisco',
    'Model':'2960-24LC-S',
    'Serial':'FHK1439F2TT'
   }
 ],
   'VLANs':[
     {
     'VLAN':'20',
     'Description':'Retail Store',
     'Gateway':'10.44.xxx.1',
     'Subnet':'255.255.255.192'
    },
    {
      'VLAN':'410',
      'Description':'External Tablet',
      'Gateway':'10.44.xxx.1',
      'Subnet':'255.255.255.240'
    }
   ]
 };

 if($scope.Network.Net_devices[i].type == 'Router'){
   $scope.nodes.push({id:$scope.Network.Net_devices[i].name+' '+$scope.Network.Net_devices[i].type, label:$scope.Network.Net_devices[i].name+' '+$scope.Network.Net_devices[i].Loopback, image: DIR + 'router.png', shape: 'image'});
   for(var j = 0; j < $scope.Network.WANs.length;  j++ ){
      $scope.edges.push({from: $scope.Network.Net_devices[i].name+' '+$scope.Network.Net_devices[i].type, to: $scope.Network.WANs[j].Provider, length: EDGE_LENGTH_MAIN});
   }
 }else{
   $scope.nodes.push({id:$scope.Network.Net_devices[i].name+' '+$scope.Network.Net_devices[i].type, label:$scope.Network.Net_devices[i].name+' '+$scope.Network.Net_devices[i].Loopback, image: DIR + 'switch.png', shape: 'image'});
   for(var k = 0; k < $scope.Network.Net_devices.length;  k++ ){
     if($scope.Network.Net_devices[k].type == 'Router'){
         $scope.edges.push({from: $scope.Network.Net_devices[i].name+' '+$scope.Network.Net_devices[i].type, to:$scope.Network.Net_devices[k].name+' '+$scope.Network.Net_devices[k].type, length: EDGE_LENGTH_MAIN});
     }
   }
 }
 Netdata.put('/update/:id',function(req,response,nex){
   //update
   let net = new network();
   //sort out data
   let Net_Device_sorted = net.clearNetDevice(req.body.Net_devices);
   let End_Device_sorted = net.clearEndDevice(req.body.End_Devices);
   let WAN_sorted = net.clearWAN(req.body.WANs);
   let VlanNetwork_sorted = net.clearVlanWork(req.body.VlanNetwork);

   db.get_connection(qb=>{
     // update data
     qb.update('network',req.body.network_info,{id:req.params.id},(err,res)=>{
       if(err) return console.error(err);
       console.log(res);
     });
     if (!(End_Device_sorted.End_update === undefined || End_Device_sorted.End_update.length == 0)) {
       for(let i=0; i<End_Device_sorted.End_update.length; i++){
         qb.update('end_device',End_Device_sorted.End_update[i],{id:End_Device_sorted.End_update[i].id}, (err, res)=>{
           if(err) return console.error(err);
           console.log(res);
         })
       };
     };
     if (!(Net_Device_sorted.Net_update === undefined || Net_Device_sorted.Net_update.length == 0)) {
       //update net device
       for(let i=0; i<Net_Device_sorted.Net_update.length; i++){
         qb.update('net_device',Net_Device_sorted.Net_update[i],{id:Net_Device_sorted.Net_update[i].id}, (err, res)=>{
           if(err) return console.error(err);
           console.log(res);
         })
       };
     };
     if (!(WAN_sorted.WANs_update === undefined || WAN_sorted.WANs_update.length == 0)) {
       //update wan device
       for(let i=0; i<WAN_sorted.WANs_update.length; i++){
         qb.update('wan',WAN_sorted.WANs_update[i],{id:WAN_sorted.WANs_update[i].id}, (err, res)=>{
           if(err) return console.error(err);
           console.log(res);
         })
       };
     }
     if (!(VlanNetwork_sorted.VlanNetwork_update === undefined || VlanNetwork_sorted.VlanNetwork_update.length == 0)) {
       //update wan device
       for(let i=0; i<VlanNetwork_sorted.VlanNetwork_update.length; i++){
         qb.update('VlanNetwork',VlanNetwork_sorted.VlanNetwork_update[i],{id:VlanNetwork_sorted.VlanNetwork_update[i].id}, (err, res)=>{
           if(err) return console.error(err);
           console.log(res);
         })
       };
     }
     if (!(End_Device_sorted.End_delete === undefined || End_Device_sorted.End_delete.length == 0)) {
       //delete user
       for(let i=0; i<End_Device_sorted.End_delete.length; i++){
         console.log(End_Device_sorted.End_delete[i]);
         qb.delete('end_device',{id:End_Device_sorted.End_delete[i].id}, (err, res)=>{
           if(err) return console.error(err);
           console.log(res);
         });
       };
     };
     if (!(Net_Device_sorted.Net_delete === undefined || Net_Device_sorted.Net_delete.length == 0)) {
       for(let i=0; i<Net_Device_sorted.Net_delete.length; i++){
         console.log(Net_Device_sorted.Net_delete[i]);
         qb.delete('net_device',{id:Net_Device_sorted.Net_delete[i].id}, (err, res)=>{
           if(err) return console.error(err);
           console.log(res);
         });
       };
     };
     if (!(WAN_sorted.WANs_delete === undefined || WAN_sorted.WANs_delete.length == 0)) {
       for(let i=0; i<WAN_sorted.WANs_delete.length; i++){
         console.log(WAN_sorted.WANs_delete[i]);
         qb.delete('wan',{id:WAN_sorted.WANs_delete[i].id}, (err, res)=>{
           if(err) return console.error(err);
           console.log(res);
         });
       };
     };
     if (!(VlanNetwork_sorted.VlanNetwork_delete === undefined || VlanNetwork_sorted.VlanNetwork_delete.length == 0)) {
       for(let i=0; i<VlanNetwork_sorted.VlanNetwork_delete.length; i++){
         console.log(VlanNetwork_sorted.VlanNetwork_delete[i]);
         qb.delete('VlanNetwork',{id:VlanNetwork_sorted.VlanNetwork_delete[i].id}, (err, res)=>{
           if(err) return console.error(err);
           console.log(res);
         })
       };
     };

      //add data
     if (!(Net_Device_sorted.Net_Add === undefined || Net_Device_sorted.Net_Add == 0)) {
       qb.insert_batch("Net_device",Net_Device_sorted.Net_Add, (err, res)=>{
          if(err) return console.error(err);
          console.log("Netword Device ok");
       });
     };
     if (!(End_Device_sorted.End_Add === undefined || End_Device_sorted.End_Add == 0)) {
       qb.insert_batch("End_Device",End_Device_sorted.End_Add, (err, res)=>{
          if(err) return console.error(err);
          console.log("End_Device ok ");
       });
     };
     if (!(WAN_sorted.WANs_Add === undefined || WAN_sorted.WANs_Add == 0)) {
       qb.insert_batch("WAN",WAN_sorted.WANs_Add,(err, res)=>{
         if(err) return console.error(err);
         console.log("WAN ok");
       });
     };
     if (!(VlanNetwork_sorted.VlanNetwork_Add === undefined || VlanNetwork_sorted.VlanNetwork_Add == 0)) {
       qb.insert_batch("VlanNetwork",VlanNetwork_sorted.VlanNetwork_Add,(err, res)=>{
         if(err) return console.error(err);
         console.log("VlanNetwork ok");
       });
     };
     if(!(req.body.Update_history.Description === undefined)){
       req.body.Update_history.user_id = req.user.user_id;
       qb.insert('update_history',req.body.Update_history,(err, res)=>{
           qb.release();
           if(err) return console.error(err);
           console.log("update_history ok");
           return response.sendStatus(200);
       });
     }else{
       qb.release();
       return response.sendStatus(200);
     }
   });
 });
